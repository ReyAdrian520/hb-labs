// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    username,
    password,
    email
)   VALUES(
        $1, $2, $3 
) RETURNING user_id, username, password, email
`

type CreateUserParams struct {
	Username sql.NullString `json:"username"`
	Password sql.NullString `json:"password"`
	Email    sql.NullString `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM USERS WHERE 'title' = $1
`

func (q *Queries) DeleteUser(ctx context.Context, dollar_1 interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteUser, dollar_1)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, username, password, email FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Password,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersDetails = `-- name: GetUsersDetails :one
SELECT user_id, username, password, email FROM users
WHERE  user_id = $1 LIMIT 1
`

func (q *Queries) GetUsersDetails(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsersDetails, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
	)
	return i, err
}
